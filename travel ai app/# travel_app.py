# travel_app.py

import streamlit as st
import google.generativeai as genai
from urllib.parse import quote

# --- C·∫§U H√åNH BAN ƒê·∫¶U ---
st.set_page_config(
    page_title="AI T∆∞ v·∫•n Du l·ªãch",
    page_icon="‚úàÔ∏è",
    layout="wide"
)

# --- H√ÄM C·∫§U H√åNH GEMINI API ---
def configure_gemini():
    try:
        # C√°ch 1: D√πng secrets khi tri·ªÉn khai
        # api_key = st.secrets["GOOGLE_API_KEY"]

        # C√°ch 2: Nh·∫≠p tr·ª±c ti·∫øp ƒë·ªÉ ch·∫°y c·ª•c b·ªô (ch·ªâ d√πng th·ª≠ nghi·ªám)
        api_key = st.secrets["GOOGLE_API_KEY"]  # <-- Thay b·∫±ng API Key th·∫≠t

        genai.configure(api_key=api_key)
        return genai.GenerativeModel("gemini-1.5-flash")
    except Exception as e:
        st.error(f"L·ªói c·∫•u h√¨nh API Gemini: {e}")
        st.stop()

# --- H√ÄM T·∫†O PROMPT ---
def build_prompt(destination):
    return f"""
    H√£y ƒë√≥ng vai m·ªôt chuy√™n gia t∆∞ v·∫•n du l·ªãch.
    T·∫°o m·ªôt l·ªãch tr√¨nh du l·ªãch chi ti·∫øt trong 3 ng√†y cho ƒë·ªãa ƒëi·ªÉm ho·∫∑c lo·∫°i h√¨nh du l·ªãch sau: "{destination}".

    Y√™u c·∫ßu ƒë·∫ßu ra ph·∫£i c√≥ c·∫•u tr√∫c r√µ r√†ng nh∆∞ sau:
    - **T·ªïng quan chuy·∫øn ƒëi:** M·ªôt ƒëo·∫°n gi·ªõi thi·ªáu ng·∫Øn v·ªÅ ƒëi·ªÉm ƒë·∫øn.
    - **L·ªãch tr√¨nh chi ti·∫øt t·ª´ng ng√†y:**
        - **## Ng√†y 1: [T√™n ch·ªß ƒë·ªÅ cho ng√†y 1]**
        - **S√°ng:** G·ª£i √Ω 1-2 ho·∫°t ƒë·ªông.
        - **Tr∆∞a:** G·ª£i √Ω ƒë·ªãa ƒëi·ªÉm ƒÉn tr∆∞a.
        - **Chi·ªÅu:** G·ª£i √Ω 1-2 ho·∫°t ƒë·ªông.
        - **T·ªëi:** G·ª£i √Ω ƒë·ªãa ƒëi·ªÉm ƒÉn t·ªëi v√† ho·∫°t ƒë·ªông bu·ªïi t·ªëi.
    - L·∫∑p l·∫°i c·∫•u tr√∫c t∆∞∆°ng t·ª± cho **Ng√†y 2** v√† **Ng√†y 3**.
    - **·∫®m th·ª±c ƒë·∫∑c s·∫£n:** Li·ªát k√™ 5-7 m√≥n ƒÉn ƒë·∫∑c s·∫£n kh√¥ng th·ªÉ b·ªè l·ª° k√®m m√¥ t·∫£ ng·∫Øn g·ªçn.
    - **ƒêi·ªÉm tham quan n·ªïi b·∫≠t kh√°c:** Li·ªát k√™ th√™m 3-5 ƒë·ªãa ƒëi·ªÉm n·ªïi b·∫≠t kh√°c n·∫øu c√≥ th·ªùi gian.

    S·ª≠ d·ª•ng ng√¥n ng·ªØ h·∫•p d·∫´n, l√¥i cu·ªën v√† ƒë·ªãnh d·∫°ng Markdown ƒë·ªÉ d·ªÖ ƒë·ªçc (in ƒë·∫≠m, g·∫°ch ƒë·∫ßu d√≤ng).
    """

# --- GIAO DI·ªÜN ·ª®NG D·ª§NG ---
model = configure_gemini()

st.title("‚úàÔ∏è AI T∆∞ v·∫•n Du l·ªãch")
st.markdown("Ch√†o m·ª´ng b·∫°n! H√£y ƒë·ªÉ t√¥i gi√∫p b·∫°n l√™n k·∫ø ho·∫°ch cho chuy·∫øn ƒëi ƒë√°ng nh·ªõ.")

col1, col2 = st.columns([2, 1])

with col1:
    user_input = st.text_input(
        "üìç B·∫°n mu·ªën ƒëi ƒë√¢u ho·∫∑c tr·∫£i nghi·ªám lo·∫°i h√¨nh du l·ªãch n√†o?",
        placeholder="V√≠ d·ª•: ƒê√† L·∫°t, Du l·ªãch bi·ªÉn ·ªü mi·ªÅn Trung, Kh√°m ph√° H√† Giang..."
    )

    if st.button("G·ª£i √Ω cho t√¥i!", type="primary"):
        if not user_input:
            st.warning("Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm ho·∫∑c lo·∫°i h√¨nh du l·ªãch b·∫°n mu·ªën.")
        else:
            with st.spinner("AI ƒëang s√°ng t·∫°o l·ªãch tr√¨nh cho b·∫°n, vui l√≤ng ch·ªù..."):
                try:
                    prompt = build_prompt(user_input)
                    response = model.generate_content(prompt)
                    st.success("üéâ ƒê√¢y l√† l·ªãch tr√¨nh g·ª£i √Ω d√†nh cho b·∫°n!")
                    st.markdown(response.text)

                    # --- B·∫¢N ƒê·ªí & H√åNH ·∫¢NH ---
                    st.markdown("---")
                    st.subheader("üó∫Ô∏è Kh√°m ph√° th√™m")

                    encoded = quote(user_input)
                    maps_url = f"https://www.google.com/maps/search/?api=1&query={encoded}"
                    images_url = f"https://www.google.com/search?tbm=isch&q={encoded}"

                    st.markdown(f"- üìç [Xem tr√™n Google Maps]({maps_url})")
                    st.markdown(f"- üñºÔ∏è [Xem h√¨nh ·∫£nh v·ªÅ {user_input}]({images_url})")

                except Exception as e:
                    st.error(f"‚ùå L·ªói khi t·∫°o l·ªãch tr√¨nh: {e}")

with col2:
    st.image(
        "https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?q=80&w=1883&auto=format&fit=crop",
        caption="L√™n k·∫ø ho·∫°ch cho chuy·∫øn phi√™u l∆∞u ti·∫øp theo c·ªßa b·∫°n",
        use_column_width=True
    )
    st.info(
        "**üí° M·∫πo:**\n"
        "- Cung c·∫•p th√¥ng tin c√†ng chi ti·∫øt, g·ª£i √Ω c√†ng ch√≠nh x√°c.\n"
        "- Th·ª≠ nh·∫≠p: 'Ph∆∞·ª£t T√¢y B·∫Øc m√πa l√∫a ch√≠n' ho·∫∑c 'Ngh·ªâ d∆∞·ª°ng sang tr·ªçng t·∫°i Ph√∫ Qu·ªëc'."
    )
